{"version":3,"sources":["components/Jumbotron/index.js","utils/API.js","components/Grid/index.js","components/List/index.js","components/Form/index.js","pages/Home.js","pages/Add.js","pages/Discography.js","pages/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","children","style","clear","paddingTop","className","_host","getRecords","axios","get","getRecord","id","deleteRecord","delete","saveRecord","recordData","post","Container","fluid","List","ListItem","Label","props","textAlign","color","fontSize","fontWeight","ImageUpload","type","class","Input","TextArea","rows","FormBtn","float","marginBottom","Home","state","records","artist","titleA","titleB","region","city","releaseDate","image","Component","Add","recordLabel","cityRegion","comments","handleFormSubmit","event","preventDefault","API","then","setState","handleChange","target","name","value","this","onChange","placeholder","onClick","Discography","discography","loadDiscography","res","data","catch","err","console","log","length","map","record","key","_id","to","Detail","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb3ab515.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ clear: \"both\", paddingTop: 50 }}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import axios from \"axios\";\r\n\r\nvar _host = \"http://localhost:3001\";\r\n\r\nexport default {\r\n  // Gets all records\r\n  getRecords: function() {\r\n    return axios.get(_host + \"/api/records\");\r\n  },\r\n  // Gets the record with the given id\r\n  getRecord: function(id) {\r\n    return axios.get(_host + \"/api/records/\" + id);\r\n  },\r\n  // Deletes the record with the given id\r\n  deleteRecord: function(id) {\r\n    return axios.delete(\"/api/records/\" + id);\r\n  },\r\n  // Saves a record to the database\r\n  saveRecord: function(recordData) {\r\n    return axios.post(_host + \"/api/records\", recordData);\r\n  }\r\n};\r\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n// import \"./style.css\";\n\n// This file exports both the List and ListItem components\n\nexport function List({ children }) {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\">{children}</ul>\n    </div>\n  );\n}\n\nexport function ListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}\n","import React from \"react\";\r\n// import \"./style.css\";\r\n\r\nexport function Label(props) {\r\n  const styles = {\r\n    textAlign: 'left',\r\n    color: '#410000',\r\n    fontSize: '20px',\r\n    fontWeight: 'bolder'\r\n  }\r\n  return (\r\n    <p style={styles}>{props.children}</p>\r\n  );\r\n}\r\n\r\nexport function ImageUpload(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <input type=\"file\" class=\"form-control-file\" id=\"imageUpload\" {...props} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function Input(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <input className=\"form-control\" type=\"text\" {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TextArea(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <textarea className=\"form-control\" rows=\"5\" {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function FormBtn(props) {\r\n  return (\r\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\r\n      {props.children}\r\n    </button>\r\n  );\r\n}","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n      records: [],\r\n      artist: \"\",\r\n      titleA: \"\",\r\n      titleB: \"\",\r\n      region: \"\",\r\n      city: \"\", \r\n      releaseDate: \"\",\r\n      image: \"\"\r\n  };\r\n\r\n\r\n  // componentDidMount() {\r\n  //     this.loadForm();\r\n  // };\r\n\r\n  render() {\r\n      return (\r\n          <Container fluid>\r\n              <Jumbotron>\r\n                  <h1>HOME</h1>\r\n              </Jumbotron>\r\n          </Container>\r\n      )\r\n  };\r\n};\r\n\r\nexport default Home;","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn, Label, ImageUpload } from \"../components/Form\";\r\n\r\nclass Add extends Component {\r\n    state = {\r\n        artist: \"\",\r\n        titleA: \"\",\r\n        titleB: \"\",\r\n        recordLabel: \"\",\r\n        cityRegion: \"\",\r\n        releaseDate: \"\",\r\n        comments: \"\",\r\n        image: \"\",\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        if (this.state.artist && this.state.titleA) {\r\n            API.saveRecord({\r\n                artist: this.state.artist,\r\n                titleA: this.state.titleA,\r\n                titleB: this.state.titleB,\r\n                recordLabel: this.state.recordLabel,\r\n                cityRegion: this.state.cityRegion,\r\n                releaseDate: this.state.releaseDate,\r\n                comments: this.state.comments,\r\n                image: this.state.image\r\n            })\r\n                .then(this.setState({ artist: \"\", titleA: \"\", titleB: \"\", recordLabel: \"\", cityRegion: \"\", releaseDate: \"\", comments: \"\", image: \"\" }));\r\n                // .catch(err => console.log(err));\r\n        }\r\n    };\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Jumbotron>\r\n                    <form>\r\n                        <Label>Artist:</Label>\r\n                        <Input\r\n                            value={this.state.artist}\r\n                            onChange={this.handleChange}\r\n                            name=\"artist\"\r\n                            placeholder=\"Name of artist or group\"\r\n                        />\r\n                        <Label>A Side (or album title if LP or EP):</Label>\r\n                        <Input\r\n                            value={this.state.titleA}\r\n                            onChange={this.handleChange}\r\n                            name=\"titleA\"\r\n                            placeholder=\"A-Side title or Album title\"\r\n                        />\r\n                        <Label>B Side:</Label>\r\n                        <Input\r\n                            value={this.state.titleB}\r\n                            onChange={this.handleChange}\r\n                            name=\"titleB\"\r\n                            placeholder=\"B-Side title or if album, leave blank\"\r\n                        />\r\n                        <Label>Record Label (if no label, input 'no label'):</Label>\r\n                        <Input\r\n                            value={this.state.recordLabel}\r\n                            onChange={this.handleChange}\r\n                            name=\"recordLabel\"\r\n                            placeholder=\"Record label name (if none, note 'no label')\"\r\n                        />                       \r\n                        <Label>City or Region:</Label>\r\n                        <Input\r\n                            value={this.state.cityRegion}\r\n                            onChange={this.handleChange}\r\n                            name=\"cityRegion\"\r\n                            placeholder=\"City/Town or general region of release\"\r\n                        />\r\n                        <Label>Date of Release:</Label>\r\n                        <Input\r\n                            value={this.state.releaseDate}\r\n                            onChange={this.handleChange}\r\n                            name=\"releaseDate\"\r\n                            placeholder=\"Exact or approximate release date\"\r\n                        />\r\n                        <Label>Notes on Release:</Label>\r\n                        <TextArea\r\n                            value={this.state.comments}\r\n                            onChange={this.handleChange}\r\n                            name=\"comments\"\r\n                            placeholder=\"Add any relevant notes or comments you may have for this release.\"\r\n                        />\r\n                        <Label>Image of Record to Upload:</Label>\r\n                        <ImageUpload\r\n                            value={this.state.image}\r\n                            onChange={this.handleChange}\r\n                            name=\"image\"\r\n                        />\r\n                        <FormBtn onClick={this.handleFormSubmit}>Submit Release</FormBtn>\r\n\r\n                    </form>\r\n                </Jumbotron>\r\n            </Container>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Add;","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\n// import { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nclass Discography extends Component {\r\n    state = {\r\n        discography: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadDiscography();\r\n    };\r\n\r\n    loadDiscography = () => {\r\n        API.getRecords()\r\n            .then(res =>\r\n                this.setState({ discography: res.data })\r\n            )\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Jumbotron>\r\n                    {this.state.discography.length ? (\r\n                        <List>\r\n                            {this.state.discography.map(record => (\r\n                                <ListItem key={record._id}>\r\n                                    <Link to={\"/records/\" + record._id}>\r\n                                        \r\n                                    <strong>{record.artist}</strong> - {record.titleA} / {record.titleB} - {record.recordLabel}\r\n                                        \r\n                                    </Link>\r\n                                </ListItem>\r\n                            ))}\r\n                        </List>\r\n                    ) : (\r\n                        <h3>No data to list!</h3>\r\n                    )}\r\n                </Jumbotron>\r\n            </Container>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Discography;","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nclass Detail extends Component {\r\n    state = {\r\n      records: [],\r\n      artist: \"\",\r\n      titleA: \"\",\r\n      titleB: \"\",\r\n      region: \"\",\r\n      city: \"\",\r\n      releaseDate: \"\",\r\n      image: \"\"\r\n    };\r\n\r\n    render() {\r\n      return (\r\n          <Container fluid>\r\n              <Jumbotron>\r\n                  <h1>RECORD DETAILS GO HERE</h1>\r\n              </Jumbotron>\r\n          </Container>\r\n      )\r\n  };\r\n};\r\n\r\nexport default Detail;","import React from 'react';\n// import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Add from \"./pages/Add\";\nimport Discography from \"./pages/Discography\";\nimport Detail from \"./pages/Detail\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/addentry\" component={Add} />\n          <Route exact path=\"/discography\" component={Discography} />\n          <Route exact path=\"/records/:id\" component={Detail} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}