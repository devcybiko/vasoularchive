{"version":3,"sources":["images/site/header.png","components/Grid/index.js","components/Card/index.js","components/Header/index.js","components/Nav/index.js","components/Jumbotron/index.js","pages/Home.js","utils/API.js","components/Form/index.js","pages/Add.js","components/List/index.js","pages/Discography.js","components/DetailImage/index.js","pages/Detail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","fluid","children","className","Card","props","TopImage","id","src","headerImage","Nav","Jumbotron","style","paddingTop","paddingBottom","Home","state","user","href","Component","_host","getRecords","axios","get","getRecord","deleteRecord","delete","saveRecord","recordData","post","Label","textAlign","color","fontSize","fontWeight","ImageUpload","type","Input","TextArea","rows","FormBtn","float","marginBottom","Add","artist","titleA","titleB","recordLabel","cityRegion","releaseDate","comments","image","file","undefined","handleFormSubmit","event","preventDefault","sendRequest","API","name","then","setState","handleChange","target","console","log","files","value","Promise","resolve","reject","req","XMLHttpRequest","upload","addEventListener","alert","response","formData","FormData","append","open","send","this","onChange","placeholder","onClick","List","ListItem","Discography","discography","loadDiscography","res","data","catch","err","length","map","record","key","_id","to","RecordDetail","height","width","Detail","match","params","alt","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,0VCKpC,SAASC,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjC,OAAO,yBAAKC,UAAS,mBAAcF,EAAQ,SAAW,KAAOC,G,MCFxD,SAASE,EAAMC,GAElB,OAAO,uCAAKF,UAAU,QAAWE,GAC5BA,EAAMH,U,2BCFR,SAASI,EAASD,GAErB,OAAO,yBAAKF,UAAU,QACb,uCAAKA,UAAU,eAAeI,GAAG,SAASC,IAAKC,KAAiBJ,IAChE,wBAAIF,UAAU,cAAd,8B,MCIEO,MAVf,YAA0B,IAAZR,EAAW,EAAXA,SACZ,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,eACbD,K,MCMQS,MAVf,YAAkC,IAAbT,EAAY,EAAZA,SACnB,OACE,yBACEU,MAAO,CAAEC,WAAY,EAAGC,cAAe,GACvCX,UAAU,aACTD,ICoBQa,E,2MAnBXC,MAAQ,CACJC,KAAM,I,wEAIN,OACI,kBAACjB,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,KAAK,uBAAGiB,KAAK,IAAIX,GAAG,YAAf,QAAkC,uBAAGW,KAAK,gBAAR,eAAsC,uBAAGA,KAAK,aAAR,cAC7E,kBAACZ,EAAD,MACA,6BACA,kBAAC,EAAD,KACI,kDACA,8C,GAbDa,a,yBCNfC,EAAQ,wBAEG,GAEbC,WAAY,WACV,OAAOC,IAAMC,IAAIH,EAAQ,iBAG3BI,UAAW,SAASjB,GAClB,OAAOe,IAAMC,IAAIH,EAAQ,gBAAkBb,IAG7CkB,aAAc,SAASlB,GACrB,OAAOe,IAAMI,OAAO,gBAAkBnB,IAGxCoB,WAAY,SAASC,GACnB,OAAON,IAAMO,KAAKT,EAAQ,eAAgBQ,KCfvC,SAASE,EAAMzB,GAOpB,OACE,uBAAGO,MAPU,CACbmB,UAAW,OACXC,MAAO,UACPC,SAAU,OACVC,WAAY,WAGO7B,EAAMH,UAItB,SAASiC,EAAY9B,GAC1B,OACE,yBAAKF,UAAU,cACb,yCAAOiC,KAAK,OAAOjC,UAAU,oBAAoBI,GAAG,eAAkBF,KAKrE,SAASgC,EAAMhC,GACpB,OACE,yBAAKF,UAAU,cACb,yCAAOA,UAAU,eAAeiC,KAAK,QAAW/B,KAK/C,SAASiC,EAASjC,GACvB,OACE,yBAAKF,UAAU,cACb,4CAAUA,UAAU,eAAeoC,KAAK,KAAQlC,KAK/C,SAASmC,EAAQnC,GACtB,OACE,4CAAYA,EAAZ,CAAmBO,MAAO,CAAE6B,MAAO,QAASC,aAAc,IAAMvC,UAAU,oBACvEE,EAAMH,U,ICiGEyC,E,2MAlIX3B,MAAQ,CACJ4B,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,YAAa,GACbC,WAAY,GACZC,YAAa,GACbC,SAAU,GACVC,MAAO,GACPC,UAAMC,G,EAqBVC,iBAAmB,SAAAC,GACfA,EAAMC,iBACN,EAAKC,YAAY,EAAKzC,MAAMoC,MACxB,EAAKpC,MAAM4B,QAAU,EAAK5B,MAAM6B,QAChCa,EAAI/B,WAAW,CACXiB,OAAQ,EAAK5B,MAAM4B,OACnBC,OAAQ,EAAK7B,MAAM6B,OACnBC,OAAQ,EAAK9B,MAAM8B,OACnBC,YAAa,EAAK/B,MAAM+B,YACxBC,WAAY,EAAKhC,MAAMgC,WACvBC,YAAa,EAAKjC,MAAMiC,YACxBC,SAAU,EAAKlC,MAAMkC,SACrBC,MAAO,EAAKnC,MAAMoC,KAAKO,OAEtBC,KAAK,EAAKC,SAAS,CAAEjB,OAAQ,GAAIC,OAAQ,GAAIC,OAAQ,GAAIC,YAAa,GAAIC,WAAY,GAAIC,YAAa,GAAIC,SAAU,GAAIC,MAAO,O,EAK7IW,aAAe,SAAAP,GACe,UAAtBA,EAAMQ,OAAOJ,OACbK,QAAQC,IAAIV,EAAMQ,OAAOG,OACzB,EAAKlD,MAAMoC,KAAOG,EAAMQ,OAAOG,MAAM,IAHrB,MAKIX,EAAMQ,OAAtBJ,EALY,EAKZA,KAAMQ,EALM,EAKNA,MACd,EAAKN,SAAL,eACKF,EAAOQ,K,2EA5CJf,GAAO,IAAD,OAEd,OADAY,QAAQC,IAAIb,GACL,IAAIgB,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAM,IAAIC,eAEhBD,EAAIE,OAAOC,iBAAiB,SAAS,SAAAnB,GACjCoB,MAAMpB,GACNe,EAAOC,EAAIK,aAGf,IAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQ3B,EAAM,EAAKpC,MAAMmC,OAEzCoB,EAAIS,KAAK,OAAQ,gCACjBT,EAAIU,KAAKJ,Q,+BAmCb,OACI,kBAAC7E,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,KAAK,uBAAGE,UAAU,SAASe,KAAK,KAA3B,QAAuC,uBAAGA,KAAK,gBAAR,eAAsC,uBAAGA,KAAK,IAAIX,GAAG,YAAf,cAClF,kBAAC,EAAD,KACI,8BACI,kBAACuB,EAAD,gBACA,kBAACO,EAAD,CACI8B,MAAOe,KAAKlE,MAAM4B,OAClBuC,SAAUD,KAAKpB,aACfH,KAAK,SACLyB,YAAY,4BAEhB,kBAACtD,EAAD,6CACA,kBAACO,EAAD,CACI8B,MAAOe,KAAKlE,MAAM6B,OAClBsC,SAAUD,KAAKpB,aACfH,KAAK,SACLyB,YAAY,gCAEhB,kBAACtD,EAAD,gBACA,kBAACO,EAAD,CACI8B,MAAOe,KAAKlE,MAAM8B,OAClBqC,SAAUD,KAAKpB,aACfH,KAAK,SACLyB,YAAY,0CAEhB,kBAACtD,EAAD,sDACA,kBAACO,EAAD,CACI8B,MAAOe,KAAKlE,MAAM+B,YAClBoC,SAAUD,KAAKpB,aACfH,KAAK,cACLyB,YAAY,iDAEhB,kBAACtD,EAAD,wBACA,kBAACO,EAAD,CACI8B,MAAOe,KAAKlE,MAAMgC,WAClBmC,SAAUD,KAAKpB,aACfH,KAAK,aACLyB,YAAY,2CAEhB,kBAACtD,EAAD,yBACA,kBAACO,EAAD,CACI8B,MAAOe,KAAKlE,MAAMiC,YAClBkC,SAAUD,KAAKpB,aACfH,KAAK,cACLyB,YAAY,sCAEhB,kBAACtD,EAAD,0BACA,kBAACQ,EAAD,CACI6B,MAAOe,KAAKlE,MAAMkC,SAClBiC,SAAUD,KAAKpB,aACfH,KAAK,WACLyB,YAAY,sEAEhB,kBAACtD,EAAD,mCACA,kBAACK,EAAD,CACIgC,MAAOe,KAAKlE,MAAMmC,MAClBgC,SAAUD,KAAKpB,aACfH,KAAK,UAET,6BACA,kBAACnB,EAAD,CAAS6C,QAASH,KAAK5B,kBAAvB,yB,GA5HNnC,a,MCHX,SAASmE,EAAT,GAA6B,IAAbpF,EAAY,EAAZA,SACrB,OACE,yBAAKC,UAAU,2BACb,wBAAIA,UAAU,cAAcD,IAK3B,SAASqF,EAAT,GAAiC,IAAbrF,EAAY,EAAZA,SACzB,OAAO,wBAAIC,UAAU,mBAAmBD,G,ICsC3BsF,E,2MA1CXxE,MAAQ,CACJyE,YAAa,I,EAOjBC,gBAAkB,WACdhC,EAAIrC,aACCuC,MAAK,SAAA+B,GAAG,OACL,EAAK9B,SAAS,CAAE4B,YAAaE,EAAIC,UAEpCC,OAAM,SAAAC,GAAG,OAAI9B,QAAQC,IAAI6B,O,mFAR9BZ,KAAKQ,oB,+BAYL,OACI,kBAAC1F,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,KAAK,uBAAGE,UAAU,SAASe,KAAK,KAA3B,QAAuC,uBAAGA,KAAK,IAAIX,GAAG,YAAf,eAAyC,uBAAGW,KAAK,aAAR,cACrF,kBAAC,EAAD,KACKgE,KAAKlE,MAAMyE,YAAYM,OACpB,kBAACT,EAAD,KACKJ,KAAKlE,MAAMyE,YAAYO,KAAI,SAAAC,GAAM,OAC9B,kBAACV,EAAD,CAAUW,IAAKD,EAAOE,KAClB,kBAAC,IAAD,CAAMC,GAAI,YAAcH,EAAOE,KAE/B,gCAASF,EAAOrD,QAFhB,MAEoCqD,EAAOpD,OAF3C,MAEsDoD,EAAOnD,OAF7D,MAEwEmD,EAAOlD,kBAO3F,sD,GAnCE5B,a,MCNnB,SAASkF,EAAchG,GAM1B,OAAO,yCAASA,EAAT,CAAgBO,MALR,CACX0F,OAAQ,QACRC,MAAO,QACP9D,MAAO,W,ICoCA+D,E,2MA/BbxF,MAAQ,CACNiF,OAAQ,I,mFAGW,IAAD,OAClBvC,EAAIlC,UAAU0D,KAAK7E,MAAMoG,MAAMC,OAAOnG,IACnCqD,MAAK,SAAA+B,GAAG,OAAI,EAAK9B,SAAS,CAAEoC,OAAQN,EAAIC,UACxCC,OAAM,SAAAC,GAAG,OAAI9B,QAAQC,IAAI6B,Q,+BAI5B,IAAM3C,EAAQ,yBAA2B+B,KAAKlE,MAAMiF,OAAO9C,MAC3D,OACE,kBAACnD,EAAD,CAAWC,OAAK,GACd,kBAAC,EAAD,KAAK,uBAAGE,UAAU,SAASe,KAAK,KAA3B,QAAuC,uBAAGA,KAAK,gBAAR,eAAsC,uBAAGA,KAAK,aAAR,cAClF,kBAACd,EAAD,KACE,2BACE,kBAACiG,EAAD,CAAc7F,IAAK2C,EAAOwD,IAAKxD,IAC/B,0BAAM5C,GAAG,WAAT,WAFF,WAE+C,0BAAMA,GAAG,gBAAgB2E,KAAKlE,MAAMiF,OAAOrD,QAAc,6BACtG,0BAAMrC,GAAG,WAAT,iBAHF,WAGqD,0BAAMA,GAAG,gBAAgB2E,KAAKlE,MAAMiF,OAAOlD,aAAmB,6BACjH,0BAAMxC,GAAG,WAAT,WAJF,WAI+C,0BAAMA,GAAG,gBAAgB2E,KAAKlE,MAAMiF,OAAOpD,QAAc,6BACtG,0BAAMtC,GAAG,WAAT,WALF,WAK+C,0BAAMA,GAAG,gBAAgB2E,KAAKlE,MAAMiF,OAAOnD,QAAc,6BACtG,0BAAMvC,GAAG,WAAT,6BANF,WAMiE,0BAAMA,GAAG,gBAAgB2E,KAAKlE,MAAMiF,OAAOhD,aAAmB,6BAC7H,0BAAM1C,GAAG,WAAT,qBAPF,WAOyD,0BAAMA,GAAG,gBAAgB2E,KAAKlE,MAAMiF,OAAO/C,UAAgB,oC,GAxBzG/B,aCaNyF,MAff,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhG,IACjC,kBAAC,IAAD,CAAO8F,OAAK,EAACC,KAAK,YAAYC,UAAWpE,IACzC,kBAAC,IAAD,CAAOkE,OAAK,EAACC,KAAK,eAAeC,UAAWvB,IAC5C,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,eAAeC,UAAWP,QCLlCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCZNW,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,MAAK,SAAA+D,GACjCA,EAAaC,kB","file":"static/js/main.61ac60ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.24e3a032.png\";","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import \"./style.css\";\r\nimport React from \"react\";\r\n\r\n\r\nexport function Card (props) {\r\n\r\n    return <div className='card' {...props}>\r\n        {props.children}\r\n    </div>\r\n\r\n};","import React from \"react\";\r\nimport headerImage from \"../../images/site/header.png\";\r\nimport \"./style.css\";\r\n// const headImage = require(\"../../public/images/site/header.png\")\r\n\r\nexport function TopImage(props) {\r\n\r\n    return <div className='card'>\r\n             <img className='card-img-top' id=\"header\" src={headerImage} {...props} />\r\n             <h1 className='card-title'>The Virginia Soul Archive</h1>\r\n           </div>\r\n    \r\n};","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav({children}) {\n  return (\n    <nav className=\"navbar\">\n      <ul className=\"breadcrumbs\">\n      {children}\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ paddingTop: 0, paddingBottom: 0 }}\n      className=\"jumbotron\">\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container } from \"../components/Grid\";\r\nimport { Card } from \"../components/Card\";\r\nimport { TopImage } from \"../components/Header\";\r\nimport Nav from \"../components/Nav\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        user: '',\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Nav><a href=\"#\" id=\"selected\">HOME</a><a href=\"/discography\">THE ARCHIVE</a><a href=\"/addentry\">ADD ENTRY</a></Nav>\r\n                <TopImage />\r\n                <br />\r\n                <Jumbotron>\r\n                    <h3>Mission Statement:</h3>\r\n                    <p>Test test</p>\r\n                </Jumbotron>\r\n            </Container>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Home;","import axios from \"axios\";\r\n\r\nvar _host = \"http://localhost:3001\";\r\n\r\nexport default {\r\n  // Gets all records\r\n  getRecords: function() {\r\n    return axios.get(_host + \"/api/records\");\r\n  },\r\n  // Gets the record with the given id\r\n  getRecord: function(id) {\r\n    return axios.get(_host + \"/api/records/\" + id);\r\n  },\r\n  // Deletes the record with the given id\r\n  deleteRecord: function(id) {\r\n    return axios.delete(\"/api/records/\" + id);\r\n  },\r\n  // Saves a record to the database\r\n  saveRecord: function(recordData) {\r\n    return axios.post(_host + \"/api/records\", recordData);\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\n// import \"./style.css\";\r\n\r\nexport function Label(props) {\r\n  const styles = {\r\n    textAlign: 'left',\r\n    color: '#410000',\r\n    fontSize: '20px',\r\n    fontWeight: 'bolder'\r\n  }\r\n  return (\r\n    <p style={styles}>{props.children}</p>\r\n  );\r\n}\r\n\r\nexport function ImageUpload(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <input type=\"file\" className=\"form-control-file\" id=\"imageUpload\" {...props} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function Input(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <input className=\"form-control\" type=\"text\" {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TextArea(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <textarea className=\"form-control\" rows=\"5\" {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function FormBtn(props) {\r\n  return (\r\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\r\n      {props.children}\r\n    </button>\r\n  );\r\n}","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container } from \"../components/Grid\";\r\nimport Nav from \"../components/Nav\";\r\nimport { Input, TextArea, FormBtn, Label, ImageUpload } from \"../components/Form\";\r\n\r\nclass Add extends Component {\r\n\r\n    state = {\r\n        artist: \"\",\r\n        titleA: \"\",\r\n        titleB: \"\",\r\n        recordLabel: \"\",\r\n        cityRegion: \"\",\r\n        releaseDate: \"\",\r\n        comments: \"\",\r\n        image: \"\",\r\n        file: undefined\r\n    };\r\n\r\n    sendRequest(file) {\r\n        console.log(file);\r\n        return new Promise((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n\r\n            req.upload.addEventListener(\"error\", event => {\r\n                alert(event);\r\n                reject(req.response);\r\n            });\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file, this.state.image);\r\n\r\n            req.open(\"POST\", \"http://localhost:3001/upload\");\r\n            req.send(formData);\r\n        })\r\n    }\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.sendRequest(this.state.file);\r\n        if (this.state.artist && this.state.titleA) {\r\n            API.saveRecord({\r\n                artist: this.state.artist,\r\n                titleA: this.state.titleA,\r\n                titleB: this.state.titleB,\r\n                recordLabel: this.state.recordLabel,\r\n                cityRegion: this.state.cityRegion,\r\n                releaseDate: this.state.releaseDate,\r\n                comments: this.state.comments,\r\n                image: this.state.file.name\r\n            })\r\n                .then(this.setState({ artist: \"\", titleA: \"\", titleB: \"\", recordLabel: \"\", cityRegion: \"\", releaseDate: \"\", comments: \"\", image: \"\" }));\r\n                // .catch(err => console.log(err));\r\n        }\r\n    };\r\n\r\n    handleChange = event => {\r\n        if (event.target.name === 'image') {\r\n            console.log(event.target.files);\r\n            this.state.file = event.target.files[0];\r\n        }\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Nav><a className=\"active\" href=\"/\">HOME</a><a href=\"/discography\">THE ARCHIVE</a><a href=\"#\" id=\"selected\">ADD ENTRY</a></Nav>\r\n                <Jumbotron>\r\n                    <form>\r\n                        <Label>Artist:</Label>\r\n                        <Input\r\n                            value={this.state.artist}\r\n                            onChange={this.handleChange}\r\n                            name=\"artist\"\r\n                            placeholder=\"Name of artist or group\"\r\n                        />\r\n                        <Label>A Side (or album title if LP or EP):</Label>\r\n                        <Input\r\n                            value={this.state.titleA}\r\n                            onChange={this.handleChange}\r\n                            name=\"titleA\"\r\n                            placeholder=\"A-Side title or Album title\"\r\n                        />\r\n                        <Label>B Side:</Label>\r\n                        <Input\r\n                            value={this.state.titleB}\r\n                            onChange={this.handleChange}\r\n                            name=\"titleB\"\r\n                            placeholder=\"B-Side title or if album, leave blank\"\r\n                        />\r\n                        <Label>Record Label (if no label, input 'no label'):</Label>\r\n                        <Input\r\n                            value={this.state.recordLabel}\r\n                            onChange={this.handleChange}\r\n                            name=\"recordLabel\"\r\n                            placeholder=\"Record label name (if none, note 'no label')\"\r\n                        />                       \r\n                        <Label>City or Region:</Label>\r\n                        <Input\r\n                            value={this.state.cityRegion}\r\n                            onChange={this.handleChange}\r\n                            name=\"cityRegion\"\r\n                            placeholder=\"City/Town or general region of release\"\r\n                        />\r\n                        <Label>Date of Release:</Label>\r\n                        <Input\r\n                            value={this.state.releaseDate}\r\n                            onChange={this.handleChange}\r\n                            name=\"releaseDate\"\r\n                            placeholder=\"Exact or approximate release date\"\r\n                        />\r\n                        <Label>Notes on Release:</Label>\r\n                        <TextArea\r\n                            value={this.state.comments}\r\n                            onChange={this.handleChange}\r\n                            name=\"comments\"\r\n                            placeholder=\"Add any relevant notes or comments you may have for this release.\"\r\n                        />\r\n                        <Label>Image of Record to Upload:</Label>\r\n                        <ImageUpload\r\n                            value={this.state.image}\r\n                            onChange={this.handleChange}\r\n                            name=\"image\"\r\n                        />\r\n                        <br />\r\n                        <FormBtn onClick={this.handleFormSubmit}>Submit Release</FormBtn>\r\n                    </form>\r\n                </Jumbotron>\r\n            </Container>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Add;","import React from \"react\";\nimport \"./style.css\";\n\n// This file exports both the List and ListItem components\n\nexport function List({ children }) {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\">{children}</ul>\n    </div>\n  );\n}\n\nexport function ListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}\n","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport Nav from \"../components/Nav\";\r\n// import { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nclass Discography extends Component {\r\n    state = {\r\n        discography: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadDiscography();\r\n    };\r\n\r\n    loadDiscography = () => {\r\n        API.getRecords()\r\n            .then(res =>\r\n                this.setState({ discography: res.data })\r\n            )\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Nav><a className=\"active\" href=\"/\">HOME</a><a href=\"#\" id=\"selected\">THE ARCHIVE</a><a href=\"/addentry\">ADD ENTRY</a></Nav>\r\n                <Jumbotron>\r\n                    {this.state.discography.length ? (\r\n                        <List>\r\n                            {this.state.discography.map(record => (\r\n                                <ListItem key={record._id}>\r\n                                    <Link to={\"/records/\" + record._id}>\r\n                                        \r\n                                    <strong>{record.artist}</strong> - {record.titleA} / {record.titleB} - {record.recordLabel}\r\n                                        \r\n                                    </Link>\r\n                                </ListItem>\r\n                            ))}\r\n                        </List>\r\n                    ) : (\r\n                        <h3>No data to list!</h3>\r\n                    )}\r\n                </Jumbotron>\r\n            </Container>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Discography;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport function RecordDetail (props) {\r\n    const styles = {\r\n        height: \"300px\",\r\n        width: \"300px\",\r\n        float: \"left\"\r\n        }    \r\n    return <img {...props} style={styles} />\r\n    };\r\n","import React, { Component } from \"react\";\r\n// import Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container } from \"../components/Grid\";\r\n// import { List, ListItem } from \"../components/List\";\r\nimport { Card } from \"../components/Card\";\r\nimport Nav from \"../components/Nav\";\r\nimport { RecordDetail } from \"../components/DetailImage\";\r\n\r\n\r\nclass Detail extends Component {\r\n  state = {\r\n    record: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.getRecord(this.props.match.params.id)\r\n      .then(res => this.setState({ record: res.data }))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    const image = \"http://localhost:3001/\" + this.state.record.image;\r\n    return (\r\n      <Container fluid>\r\n        <Nav><a className=\"active\" href=\"/\">HOME</a><a href=\"/discography\">THE ARCHIVE</a><a href=\"/addentry\">ADD ENTRY</a></Nav>\r\n        <Card>\r\n          <p>\r\n            <RecordDetail src={image} alt={image} />\r\n            <span id=\"subject\">Artist:</span>&nbsp;&nbsp;<span id=\"returnedInfo\">{this.state.record.artist}</span><br />\r\n            <span id=\"subject\">Record Label:</span>&nbsp;&nbsp;<span id=\"returnedInfo\">{this.state.record.recordLabel}</span><br />\r\n            <span id=\"subject\">A Side:</span>&nbsp;&nbsp;<span id=\"returnedInfo\">{this.state.record.titleA}</span><br />\r\n            <span id=\"subject\">B Side:</span>&nbsp;&nbsp;<span id=\"returnedInfo\">{this.state.record.titleB}</span><br />\r\n            <span id=\"subject\">Approximate Release Date:</span>&nbsp;&nbsp;<span id=\"returnedInfo\">{this.state.record.releaseDate}</span><br />\r\n            <span id=\"subject\">Notes on release:</span>&nbsp;&nbsp;<span id=\"returnedInfo\">{this.state.record.comments}</span><br />\r\n            </p>\r\n        </Card>\r\n      </Container>\r\n    )\r\n  };\r\n};\r\n\r\nexport default Detail;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Add from \"./pages/Add\";\nimport Discography from \"./pages/Discography\";\nimport Detail from \"./pages/Detail\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/addentry\" component={Add} />\n          <Route exact path=\"/discography\" component={Discography} />\n          <Route exact path=\"/records/:id\" component={Detail} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}