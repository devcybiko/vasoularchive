{"version":3,"sources":["components/Jumbotron/index.js","components/Grid/index.js","pages/Home.js","pages/Add.js","pages/Discography.js","pages/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","children","style","height","clear","paddingTop","textAlign","className","Container","fluid","Home","state","records","artist","titleA","titleB","region","city","releaseDate","image","Component","Add","Discography","Detail","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAaeA,MAXf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OACE,yBACEC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,UACjEC,UAAU,aAETN,I,MCHA,SAASO,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOR,EAAY,EAAZA,SACjC,OAAO,yBAAKM,UAAS,mBAAcE,EAAQ,SAAW,KAAOR,G,UC8BhDS,E,2MA3BbC,MAAQ,CACJC,QAAS,GACTC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,KAAM,GACNC,YAAa,GACbC,MAAO,I,wEASP,OACI,kBAACX,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,KACI,0C,GArBCW,aC6BJC,E,2MA3BXV,MAAQ,CACJC,QAAS,GACTC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,KAAM,GACNC,YAAa,GACbC,MAAO,I,wEASP,OACI,kBAACX,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,KACI,oD,GArBFW,aCYHE,E,2MAZXX,MAAQ,CACNC,QAAS,GACTC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,KAAM,GACNC,YAAa,GACbC,MAAO,I,6BATaC,aCuBXG,E,2MAtBXZ,MAAQ,CACNC,QAAS,GACTC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,KAAM,GACNC,YAAa,GACbC,MAAO,I,wEAIP,OACI,kBAACX,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,KACI,4D,GAhBGW,aCgBNI,MAff,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,YAAYC,UAAWN,IACzC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,eAAeC,UAAWL,IAC5C,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,eAAeC,UAAWJ,QCLlCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.80e11655.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n      records: [],\r\n      artist: \"\",\r\n      titleA: \"\",\r\n      titleB: \"\",\r\n      region: \"\",\r\n      city: \"\", \r\n      releaseDate: \"\",\r\n      image: \"\"\r\n  };\r\n\r\n\r\n  // componentDidMount() {\r\n  //     this.loadForm();\r\n  // };\r\n\r\n  render() {\r\n      return (\r\n          <Container fluid>\r\n              <Jumbotron>\r\n                  <h1>HOME</h1>\r\n              </Jumbotron>\r\n          </Container>\r\n      )\r\n  };\r\n};\r\n\r\nexport default Home;","import React, { Component } from \"react\";\r\nimport Form from \"../components/Form\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nclass Add extends Component {\r\n    state = {\r\n        records: [],\r\n        artist: \"\",\r\n        titleA: \"\",\r\n        titleB: \"\",\r\n        region: \"\",\r\n        city: \"\",\r\n        releaseDate: \"\",\r\n        image: \"\"\r\n    };\r\n\r\n\r\n    // componentDidMount() {\r\n    //     this.loadForm();\r\n    // };\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Jumbotron>\r\n                    <h1>FORM GOES HERE</h1>\r\n                </Jumbotron>\r\n            </Container>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Add;","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nclass Discography extends Component {\r\n    state = {\r\n      records: [],\r\n      artist: \"\",\r\n      titleA: \"\",\r\n      titleB: \"\",\r\n      region: \"\",\r\n      city: \"\",\r\n      releaseDate: \"\",\r\n      image: \"\"\r\n    };\r\n};\r\n\r\nexport default Discography;","import React, { Component } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nclass Detail extends Component {\r\n    state = {\r\n      records: [],\r\n      artist: \"\",\r\n      titleA: \"\",\r\n      titleB: \"\",\r\n      region: \"\",\r\n      city: \"\",\r\n      releaseDate: \"\",\r\n      image: \"\"\r\n    };\r\n\r\n    render() {\r\n      return (\r\n          <Container fluid>\r\n              <Jumbotron>\r\n                  <h1>RECORD DETAILS GO HERE</h1>\r\n              </Jumbotron>\r\n          </Container>\r\n      )\r\n  };\r\n};\r\n\r\nexport default Detail;","import React from 'react';\n// import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Add from \"./pages/Add\";\nimport Discography from \"./pages/Discography\";\nimport Detail from \"./pages/Detail\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/addentry\" component={Add} />\n          <Route exact path=\"/discography\" component={Discography} />\n          <Route exact path=\"/records/:id\" component={Detail} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}